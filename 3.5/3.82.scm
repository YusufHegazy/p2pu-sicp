
;; Depends on exercise 3.5 and the stream procedures defined in section 3.5

;;---------------------------------------------------------------------------

;; Original non-stream version from exercise 3.5

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
	   (/ trials-passed trials))
	  ((experiment)
	   (iter (- trials-remaining 1)
		 (+ trials-passed 1)))
	  (else
	   (iter (- trials-remaining 1)
		 trials-passed))))
  (iter trials 0))

(define (estimate-integral region-predicate rectangle trials)
  (let ((test (lambda () (disk-hit-test region-predicate
                                        rectangle))))
    (let ((hitfraction (monte-carlo trials test)))
      (* hitfraction (area rectangle)))))

(define (pi-estimation trials)
  (estimate-integral disk2 rect2 trials))

;;---------------------------------------------------------------------------

;; Stream version

(define (div-streams s1 s2) 
  (stream-map / s1 s2))

(define (monte-carlo-stream experiment)
  (define (trial-stream)
    (cons-stream (if (experiment) 1 0)
                 (trial-stream)))
  (define cumulative-hits
    (partial-sums (trial-stream)))
  (div-streams cumulative-hits integers))

(print-n (monte-carlo-stream (lambda () (disk-hit-test disk2 rect2))) 90)
;]=> 1, 1/2, 2/3, 3/4, 3/5, 2/3, 5/7, 5/8, 2/3, 3/5, 7/11, 2/3, 8/13, 9/14, 2/3, 11/16, 12/17, 13/18, 13/19, 7/10, 5/7, 8/11, 16/23, 2/3, 17/25, 17/26, 17/27, 9/14, 18/29, 19/30, 20/31, 5/8, 7/11, 11/17, 23/35, 2/3, 25/37, 25/38, 2/3, 27/40, 28/41, 29/42, 30/43, 31/44, 32/45, 33/46, 34/47, 35/48, 36/49, 37/50, 38/51, 3/4, 40/53, 20/27, 41/55, 3/4, 43/57, 43/58, 44/59, 3/4, 46/61, 47/62, 16/21, 3/4, 49/65, 49/66, 50/67, 3/4, 52/69, 26/35, 53/71, 3/4, 55/73, 28/37, 19/25, 3/4, 57/77, 29/39, 58/79, 59/80, 20/27, 61/82, 61/83, 31/42, 62/85, 63/86, 64/87, 65/88, 66/89, 67/90, ... 

(print-n
 (stream-map exact->inexact
             (monte-carlo-stream (lambda () (disk-hit-test disk2 rect2))))
 90)
;]=> 1., .5, .6666666666666666, .75, .8, .8333333333333334, .8571428571428571, .875, .7777777777777778, .7, .7272727272727273, .75, .6923076923076923, .7142857142857143, .7333333333333333, .75, .7647058823529411, .7222222222222222, .6842105263157895, .7, .7142857142857143, .7272727272727273, .7391304347826086, .7083333333333334, .72, .7307692307692307, .7407407407407407, .7142857142857143, .7241379310344828, .7333333333333333, .7096774193548387, .71875, .7272727272727273, .7352941176470589, .7428571428571429, .7222222222222222, .7297297297297297, .7105263157894737, .717948717948718, .725, .7073170731707317, .7142857142857143, .7209302325581395, .7272727272727273, .7333333333333333, .7391304347826086, .7446808510638298, .75, .7551020408163265, .76, .7647058823529411, .7692307692307693, .7735849056603774, .7777777777777778, .7818181818181819, .7678571428571429, .7719298245614035, .7586206896551724, .7627118644067796, .7666666666666667, .7540983606557377, .7580645161290323, .7619047619047619, .765625, .7692307692307693, .7727272727272727, .7761194029850746, .7794117647058824, .782608695652174, .7857142857142857, .7887323943661971, .7916666666666666, .7808219178082192, .7837837837837838, .7866666666666666, .7763157894736842, .7662337662337663, .7692307692307693, .759493670886076, .7625, .7654320987654321, .7682926829268293, .7590361445783133, .7619047619047619, .7647058823529411, .7674418604651163, .7701149425287356, .7727272727272727, .7752808988764045, .7777777777777778, ... 

(define (estimate-integral-stream region-predicate rectangle)
  (let ((test (lambda () (disk-hit-test region-predicate rectangle))))
    (scale-stream (monte-carlo-stream test) (area rectangle))))

(define pi-estimation-stream
  (estimate-integral-stream disk2 rect2))

(print-n pi-estimation-stream 100)
;]=> 4., 2., 2.6666666666666665, 3., 3.2, 3.3333333333333335, 3.4285714285714284, 3.5, 3.5555555555555554, 3.6, 3.6363636363636362, 3.6666666666666665, 3.3846153846153846, 3.4285714285714284, 3.466666666666667, 3.5, 3.5294117647058822, 3.5555555555555554, 3.5789473684210527, 3.4, 3.238095238095238, 3.272727272727273, 3.3043478260869565, 3.3333333333333335, 3.2, 3.076923076923077, 3.111111111111111, 3.142857142857143, 3.1724137931034484, 3.066666666666667, 3.096774193548387, 3.125, 3.1515151515151514, 3.176470588235294, 3.2, 3.2222222222222223, 3.2432432432432434, 3.263157894736842, 3.282051282051282, 3.3, 3.317073170731707, 3.3333333333333335, 3.255813953488372, 3.272727272727273, 3.2888888888888888, 3.3043478260869565, 3.3191489361702127, 3.3333333333333335, 3.3469387755102042, 3.36, 3.372549019607843, 3.3846153846153846, 3.3962264150943398, 3.3333333333333335, 3.3454545454545452, 3.2857142857142856, 3.2280701754385963, 3.1724137931034484, 3.1864406779661016, 3.2, 3.2131147540983607, 3.161290322580645, 3.111111111111111, 3.125, 3.1384615384615384, 3.1515151515151514, 3.1044776119402986, 3.0588235294117645, 3.0144927536231885, 3.0285714285714285, 3.0422535211267605, 3.0555555555555554, 3.0136986301369864, 3.027027027027027, 2.986666666666667, 2.9473684210526314, 2.961038961038961, 2.9743589743589745, 2.9873417721518987, 3., 3.0123456790123457, 3.024390243902439, 3.036144578313253, 3.0476190476190474, 3.0588235294117645, 3.0697674418604652, 3.0804597701149423, 3.090909090909091, 3.056179775280899, 3.066666666666667, 3.076923076923077, 3.0434782608695654, 3.053763440860215, 3.0638297872340425, 3.0736842105263156, 3.0833333333333335, 3.0927835051546393, 3.1020408163265305, 3.111111111111111, 3.12, ... 

